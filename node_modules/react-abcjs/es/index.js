function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import abcjsObj from 'abcjs';

var Abcjs = function (_PureComponent) {
  _inherits(Abcjs, _PureComponent);

  function Abcjs() {
    var _temp, _this, _ret;

    _classCallCheck(this, Abcjs);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.uniqueNumber = Date.now() + Math.random(), _temp), _possibleConstructorReturn(_this, _ret);
  }

  Abcjs.prototype.renderAbcNotation = function renderAbcNotation(abcNotation, parserParams, engraverParams, renderParams) {
    var res = abcjsObj.renderAbc('abcjs-result-' + this.uniqueNumber, abcNotation, parserParams, engraverParams, renderParams);
  };

  Abcjs.prototype.componentDidMount = function componentDidMount() {
    var _props = this.props,
        abcNotation = _props.abcNotation,
        parserParams = _props.parserParams,
        engraverParams = _props.engraverParams,
        renderParams = _props.renderParams;

    this.renderAbcNotation(abcNotation, parserParams, engraverParams, renderParams);
  };

  Abcjs.prototype.componentDidUpdate = function componentDidUpdate() {
    var _props2 = this.props,
        abcNotation = _props2.abcNotation,
        parserParams = _props2.parserParams,
        engraverParams = _props2.engraverParams,
        renderParams = _props2.renderParams;

    this.renderAbcNotation(abcNotation, parserParams, engraverParams, renderParams);
  };

  Abcjs.prototype.render = function render() {
    return React.createElement(
      'div',
      { style: { width: '100%' } },
      React.createElement('div', { id: 'abcjs-result-' + this.uniqueNumber, style: { width: '100%' } })
    );
  };

  return Abcjs;
}(PureComponent);

Abcjs.propTypes = process.env.NODE_ENV !== "production" ? {
  abcNotation: PropTypes.string,
  parserParams: PropTypes.object,
  engraverParams: PropTypes.object,
  renderParams: PropTypes.object
} : {};

Abcjs.defaultProps = {
  abcNotation: '',
  parserParams: {},
  engraverParams: { responsive: 'resize' },
  renderParams: { viewportHorizontal: true }
};

export default Abcjs;